import os
import sys
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import customtkinter as ctk
from CTkMessagebox import CTkMessagebox
import json
import threading
from datetime import datetime
import webbrowser

# Import c√°c modules c·ªßa ·ª©ng d·ª•ng
from src.api.bidv_service import BIDVService
from src.api.momo_service import MoMoService
from src.api.visa_service import VisaService
from src.api.zalopay_service import ZaloPayService
from src.gui.bill_lookup_frame import BillLookupFrame
from src.gui.payment_frame import PaymentFrame
from src.gui.history_frame import HistoryFrame
from src.gui.settings_frame import SettingsFrame
from src.gui.admin_frame import AdminFrame
from src.gui.status_frame import StatusFrame
from src.utils.config_manager import ConfigManager
from src.utils.excel_processor import ExcelProcessor

# C·∫•u h√¨nh CustomTkinter
ctk.set_appearance_mode("light")
ctk.set_default_color_theme("blue")

class PayooDesktopApp:
    def __init__(self):
        self.root = ctk.CTk()
        self.root.title("Payoo Desktop - H·ªá th·ªëng thanh to√°n h√≥a ƒë∆°n")
        self.root.geometry("1200x800")
        
        # Thi·∫øt l·∫≠p icon
        try:
            self.root.iconbitmap("assets/icon.ico")
        except:
            pass
        
        # Kh·ªüi t·∫°o services
        self.config_manager = ConfigManager()
        self.excel_processor = ExcelProcessor()
        self.init_services()
        
        # T·∫°o giao di·ªán
        self.create_ui()
        
        # T·∫£i c·∫•u h√¨nh
        self.load_config()
        
    def init_services(self):
        """Kh·ªüi t·∫°o c√°c service API"""
        try:
            self.bidv_service = BIDVService()
            self.momo_service = MoMoService()
            self.visa_service = VisaService()
            self.zalopay_service = ZaloPayService()
        except Exception as e:
            print(f"L·ªói kh·ªüi t·∫°o services: {e}")
    
    def create_ui(self):
        """T·∫°o giao di·ªán ch√≠nh"""
        # Main container
        self.main_frame = ctk.CTkFrame(self.root)
        self.main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Header
        self.create_header()
        
        # Content area v·ªõi tabview
        self.create_content_area()
        
        # Footer
        self.create_footer()
    
    def create_header(self):
        """T·∫°o header v·ªõi logo v√† th√¥ng tin"""
        header_frame = ctk.CTkFrame(self.main_frame)
        header_frame.pack(fill="x", pady=(0, 10))
        
        # Logo v√† ti√™u ƒë·ªÅ
        title_frame = ctk.CTkFrame(header_frame)
        title_frame.pack(side="left", padx=10, pady=10)
        
        title_label = ctk.CTkLabel(
            title_frame,
            text="üí≥ PAYOO DESKTOP",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        title_label.pack(pady=5)
        
        subtitle_label = ctk.CTkLabel(
            title_frame,
            text="H·ªá th·ªëng thanh to√°n h√≥a ƒë∆°n ti·ªán √≠ch",
            font=ctk.CTkFont(size=12)
        )
        subtitle_label.pack()
        
        # Th√¥ng tin tr·∫°ng th√°i
        status_frame = ctk.CTkFrame(header_frame)
        status_frame.pack(side="right", padx=10, pady=10)
        
        self.status_label = ctk.CTkLabel(
            status_frame,
            text="üü¢ H·ªá th·ªëng ho·∫°t ƒë·ªông t·ªët",
            font=ctk.CTkFont(size=12)
        )
        self.status_label.pack(pady=2)
        
        self.time_label = ctk.CTkLabel(
            status_frame,
            text=f"C·∫≠p nh·∫≠t: {datetime.now().strftime('%H:%M:%S')}",
            font=ctk.CTkFont(size=10)
        )
        self.time_label.pack(pady=2)
        
        # C·∫≠p nh·∫≠t th·ªùi gian
        self.update_time()
    
    def create_content_area(self):
        """T·∫°o khu v·ª±c n·ªôi dung ch√≠nh"""
        # Tabview
        self.tabview = ctk.CTkTabview(self.main_frame, width=1000, height=600)
        self.tabview.pack(fill="both", expand=True, pady=10)
        
        # C√°c tab
        self.create_tabs()
    
    def create_tabs(self):
        """T·∫°o c√°c tab ch√≠nh"""
        # Tab tra c·ª©u h√≥a ƒë∆°n
        bill_tab = self.tabview.add("üîç Tra c·ª©u h√≥a ƒë∆°n")
        self.bill_lookup_frame = BillLookupFrame(bill_tab, self)
        
        # Tab thanh to√°n
        payment_tab = self.tabview.add("üí≥ Thanh to√°n")
        self.payment_frame = PaymentFrame(payment_tab, self)
        
        # Tab l·ªãch s·ª≠
        history_tab = self.tabview.add("üìã L·ªãch s·ª≠")
        self.history_frame = HistoryFrame(history_tab, self)
        
        # Tab tr·∫°ng th√°i API
        status_tab = self.tabview.add("üìä Tr·∫°ng th√°i API")
        self.status_frame = StatusFrame(status_tab, self)
        
        # Tab qu·∫£n tr·ªã
        admin_tab = self.tabview.add("‚öôÔ∏è Qu·∫£n tr·ªã")
        self.admin_frame = AdminFrame(admin_tab, self)
        
        # Tab c√†i ƒë·∫∑t
        settings_tab = self.tabview.add("üîß C√†i ƒë·∫∑t")
        self.settings_frame = SettingsFrame(settings_tab, self)
    
    def create_footer(self):
        """T·∫°o footer"""
        footer_frame = ctk.CTkFrame(self.main_frame)
        footer_frame.pack(fill="x", pady=(10, 0))
        
        # Th√¥ng tin phi√™n b·∫£n
        version_label = ctk.CTkLabel(
            footer_frame,
            text="Payoo Desktop v2.0.0 - 100% Real API Integration",
            font=ctk.CTkFont(size=10)
        )
        version_label.pack(side="left", padx=10, pady=5)
        
        # N√∫t h·ªó tr·ª£
        support_button = ctk.CTkButton(
            footer_frame,
            text="üìû H·ªó tr·ª£",
            width=100,
            command=self.open_support
        )
        support_button.pack(side="right", padx=10, pady=5)
        
        # N√∫t t√†i li·ªáu
        docs_button = ctk.CTkButton(
            footer_frame,
            text="üìö T√†i li·ªáu",
            width=100,
            command=self.open_docs
        )
        docs_button.pack(side="right", padx=5, pady=5)
    
    def update_time(self):
        """C·∫≠p nh·∫≠t th·ªùi gian hi·ªán t·∫°i"""
        current_time = datetime.now().strftime('%H:%M:%S')
        self.time_label.configure(text=f"C·∫≠p nh·∫≠t: {current_time}")
        self.root.after(1000, self.update_time)
    
    def load_config(self):
        """T·∫£i c·∫•u h√¨nh t·ª´ file"""
        try:
            config = self.config_manager.load_config()
            if config:
                # √Åp d·ª•ng c·∫•u h√¨nh
                self.apply_config(config)
        except Exception as e:
            print(f"L·ªói t·∫£i c·∫•u h√¨nh: {e}")
    
    def apply_config(self, config):
        """√Åp d·ª•ng c·∫•u h√¨nh"""
        # √Åp d·ª•ng theme
        if "theme" in config:
            ctk.set_appearance_mode(config["theme"])
        
        # √Åp d·ª•ng c·∫•u h√¨nh API
        if "api_config" in config:
            self.update_api_config(config["api_config"])
    
    def update_api_config(self, api_config):
        """C·∫≠p nh·∫≠t c·∫•u h√¨nh API"""
        # C·∫≠p nh·∫≠t c·∫•u h√¨nh cho c√°c service
        pass
    
    def open_support(self):
        """M·ªü trang h·ªó tr·ª£"""
        webbrowser.open("https://payoo.vn/support")
    
    def open_docs(self):
        """M·ªü t√†i li·ªáu"""
        webbrowser.open("https://payoo.vn/docs")
    
    def show_message(self, title, message, msg_type="info"):
        """Hi·ªÉn th·ªã th√¥ng b√°o"""
        if msg_type == "info":
            CTkMessagebox(title=title, message=message, icon="info")
        elif msg_type == "warning":
            CTkMessagebox(title=title, message=message, icon="warning")
        elif msg_type == "error":
            CTkMessagebox(title=title, message=message, icon="cancel")
        elif msg_type == "success":
            CTkMessagebox(title=title, message=message, icon="check")
    
    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng"""
        self.root.mainloop()

def main():
    """H√†m main"""
    try:
        app = PayooDesktopApp()
        app.run()
    except Exception as e:
        print(f"L·ªói kh·ªüi ƒë·ªông ·ª©ng d·ª•ng: {e}")
        messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông ·ª©ng d·ª•ng: {e}")

if __name__ == "__main__":
    main()