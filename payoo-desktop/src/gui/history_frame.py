import customtkinter as ctk
from tkinter import ttk, messagebox, filedialog
import json
import threading
from datetime import datetime, timedelta

class HistoryFrame:
    """Frame l·ªãch s·ª≠ giao d·ªãch"""
    
    def __init__(self, parent, app):
        self.parent = parent
        self.app = app
        self.history_data = []
        self.create_ui()
        self.load_history()
    
    def create_ui(self):
        """T·∫°o giao di·ªán l·ªãch s·ª≠"""
        # Main container
        main_frame = ctk.CTkFrame(self.parent)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Title
        title_label = ctk.CTkLabel(
            main_frame,
            text="üìã L·ªäCH S·ª¨ GIAO D·ªäCH",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        title_label.pack(pady=10)
        
        # Controls frame
        self.create_controls(main_frame)
        
        # History table
        self.create_history_table(main_frame)
        
        # Summary frame
        self.create_summary(main_frame)
    
    def create_controls(self, parent):
        """T·∫°o c√°c controls filter v√† action"""
        controls_frame = ctk.CTkFrame(parent)
        controls_frame.pack(fill="x", pady=10)
        
        # Filter frame
        filter_frame = ctk.CTkFrame(controls_frame)
        filter_frame.pack(fill="x", padx=10, pady=5)
        
        # Date range
        date_frame = ctk.CTkFrame(filter_frame)
        date_frame.pack(side="left", padx=5)
        
        ctk.CTkLabel(date_frame, text="T·ª´ ng√†y:", font=ctk.CTkFont(size=12)).pack(side="left", padx=5)
        self.start_date_entry = ctk.CTkEntry(date_frame, width=120, placeholder_text="yyyy-mm-dd")
        self.start_date_entry.pack(side="left", padx=5)
        
        ctk.CTkLabel(date_frame, text="ƒê·∫øn ng√†y:", font=ctk.CTkFont(size=12)).pack(side="left", padx=5)
        self.end_date_entry = ctk.CTkEntry(date_frame, width=120, placeholder_text="yyyy-mm-dd")
        self.end_date_entry.pack(side="left", padx=5)
        
        # Status filter
        status_frame = ctk.CTkFrame(filter_frame)
        status_frame.pack(side="left", padx=5)
        
        ctk.CTkLabel(status_frame, text="Tr·∫°ng th√°i:", font=ctk.CTkFont(size=12)).pack(side="left", padx=5)
        self.status_combo = ctk.CTkComboBox(
            status_frame,
            values=["T·∫•t c·∫£", "Th√†nh c√¥ng", "Th·∫•t b·∫°i", "ƒêang x·ª≠ l√Ω"],
            width=120
        )
        self.status_combo.pack(side="left", padx=5)
        self.status_combo.set("T·∫•t c·∫£")
        
        # Payment method filter
        method_frame = ctk.CTkFrame(filter_frame)
        method_frame.pack(side="left", padx=5)
        
        ctk.CTkLabel(method_frame, text="Ph∆∞∆°ng th·ª©c:", font=ctk.CTkFont(size=12)).pack(side="left", padx=5)
        self.method_combo = ctk.CTkComboBox(
            method_frame,
            values=["T·∫•t c·∫£", "MoMo", "BIDV", "ZaloPay", "Visa"],
            width=120
        )
        self.method_combo.pack(side="left", padx=5)
        self.method_combo.set("T·∫•t c·∫£")
        
        # Action buttons
        action_frame = ctk.CTkFrame(controls_frame)
        action_frame.pack(fill="x", padx=10, pady=5)
        
        # Left side buttons
        left_buttons = ctk.CTkFrame(action_frame)
        left_buttons.pack(side="left")
        
        ctk.CTkButton(left_buttons, text="üîç T√¨m ki·∫øm", command=self.filter_history, width=100).pack(side="left", padx=5)
        ctk.CTkButton(left_buttons, text="üîÑ L√†m m·ªõi", command=self.refresh_history, width=100).pack(side="left", padx=5)
        ctk.CTkButton(left_buttons, text="üóëÔ∏è X√≥a l·ªçc", command=self.clear_filters, width=100).pack(side="left", padx=5)
        
        # Right side buttons
        right_buttons = ctk.CTkFrame(action_frame)
        right_buttons.pack(side="right")
        
        ctk.CTkButton(right_buttons, text="üìä B√°o c√°o", command=self.generate_report, width=100).pack(side="left", padx=5)
        ctk.CTkButton(right_buttons, text="üíæ Xu·∫•t Excel", command=self.export_excel, width=100).pack(side="left", padx=5)
        ctk.CTkButton(right_buttons, text="üóÇÔ∏è Backup", command=self.backup_history, width=100).pack(side="left", padx=5)
    
    def create_history_table(self, parent):
        """T·∫°o b·∫£ng l·ªãch s·ª≠ giao d·ªãch"""
        table_frame = ctk.CTkFrame(parent)
        table_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Table header
        header_frame = ctk.CTkFrame(table_frame)
        header_frame.pack(fill="x", padx=5, pady=5)
        
        headers = [
            ("M√£ GD", 120),
            ("Ng√†y", 100),
            ("Kh√°ch h√†ng", 150),
            ("Lo·∫°i Hƒê", 80),
            ("S·ªë ti·ªÅn", 100),
            ("Ph∆∞∆°ng th·ª©c", 100),
            ("Tr·∫°ng th√°i", 100),
            ("H√†nh ƒë·ªông", 100)
        ]
        
        for header, width in headers:
            ctk.CTkLabel(
                header_frame,
                text=header,
                font=ctk.CTkFont(size=12, weight="bold"),
                width=width
            ).pack(side="left", padx=2)
        
        # Scrollable table content
        self.table_scroll = ctk.CTkScrollableFrame(table_frame, width=800, height=400)
        self.table_scroll.pack(fill="both", expand=True, padx=5, pady=5)
        
        # No data message
        self.no_data_label = ctk.CTkLabel(
            self.table_scroll,
            text="Ch∆∞a c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ giao d·ªãch",
            font=ctk.CTkFont(size=14),
            text_color="gray"
        )
        self.no_data_label.pack(pady=50)
    
    def create_summary(self, parent):
        """T·∫°o ph·∫ßn t·ªïng k·∫øt"""
        summary_frame = ctk.CTkFrame(parent)
        summary_frame.pack(fill="x", padx=10, pady=10)
        
        # Summary title
        ctk.CTkLabel(
            summary_frame,
            text="üìä TH·ªêNG K√ä T·ªîNG K·∫æT",
            font=ctk.CTkFont(size=16, weight="bold")
        ).pack(pady=5)
        
        # Summary cards
        cards_frame = ctk.CTkFrame(summary_frame)
        cards_frame.pack(fill="x", padx=10, pady=5)
        
        # Total transactions
        total_card = ctk.CTkFrame(cards_frame)
        total_card.pack(side="left", fill="x", expand=True, padx=5)
        
        ctk.CTkLabel(total_card, text="T·ªïng giao d·ªãch", font=ctk.CTkFont(size=12)).pack(pady=2)
        self.total_count_label = ctk.CTkLabel(total_card, text="0", font=ctk.CTkFont(size=20, weight="bold"))
        self.total_count_label.pack(pady=2)
        
        # Total amount
        amount_card = ctk.CTkFrame(cards_frame)
        amount_card.pack(side="left", fill="x", expand=True, padx=5)
        
        ctk.CTkLabel(amount_card, text="T·ªïng ti·ªÅn", font=ctk.CTkFont(size=12)).pack(pady=2)
        self.total_amount_label = ctk.CTkLabel(amount_card, text="0 VNƒê", font=ctk.CTkFont(size=20, weight="bold"), text_color="green")
        self.total_amount_label.pack(pady=2)
        
        # Success rate
        success_card = ctk.CTkFrame(cards_frame)
        success_card.pack(side="left", fill="x", expand=True, padx=5)
        
        ctk.CTkLabel(success_card, text="T·ª∑ l·ªá th√†nh c√¥ng", font=ctk.CTkFont(size=12)).pack(pady=2)
        self.success_rate_label = ctk.CTkLabel(success_card, text="0%", font=ctk.CTkFont(size=20, weight="bold"), text_color="blue")
        self.success_rate_label.pack(pady=2)
        
        # Today's transactions
        today_card = ctk.CTkFrame(cards_frame)
        today_card.pack(side="left", fill="x", expand=True, padx=5)
        
        ctk.CTkLabel(today_card, text="H√¥m nay", font=ctk.CTkFont(size=12)).pack(pady=2)
        self.today_count_label = ctk.CTkLabel(today_card, text="0", font=ctk.CTkFont(size=20, weight="bold"), text_color="orange")
        self.today_count_label.pack(pady=2)
    
    def load_history(self):
        """T·∫£i l·ªãch s·ª≠ giao d·ªãch"""
        # Simulate loading history data
        self.history_data = self.generate_sample_history()
        self.display_history()
        self.update_summary()
    
    def generate_sample_history(self):
        """T·∫°o d·ªØ li·ªáu m·∫´u cho l·ªãch s·ª≠"""
        import random
        
        sample_data = []
        for i in range(50):
            date = datetime.now() - timedelta(days=random.randint(0, 30))
            
            transaction = {
                "transaction_id": f"TX{random.randint(100000, 999999)}",
                "date": date.strftime("%Y-%m-%d %H:%M"),
                "customer_name": random.choice(["Nguy·ªÖn VƒÉn An", "Tr·∫ßn Th·ªã B√¨nh", "L√™ Minh C∆∞·ªùng", "Ph·∫°m Th·ªã Dung"]),
                "customer_id": f"CUST{random.randint(1000, 9999)}",
                "bill_type": random.choice(["ƒêi·ªán", "N∆∞·ªõc", "Internet", "TV"]),
                "amount": random.randint(100000, 1000000),
                "payment_method": random.choice(["MoMo", "BIDV", "ZaloPay", "Visa"]),
                "status": random.choice(["Th√†nh c√¥ng", "Th·∫•t b·∫°i", "ƒêang x·ª≠ l√Ω"]),
                "provider": random.choice(["EVN", "SAWACO", "VNPT", "K+"]),
                "bill_number": f"HD{random.randint(10000, 99999)}",
                "description": f"Thanh to√°n h√≥a ƒë∆°n {random.choice(['ƒëi·ªán', 'n∆∞·ªõc', 'internet', 'TV'])}"
            }
            sample_data.append(transaction)
        
        return sample_data
    
    def display_history(self, data=None):
        """Hi·ªÉn th·ªã l·ªãch s·ª≠ giao d·ªãch"""
        if data is None:
            data = self.history_data
        
        # Clear existing data
        for widget in self.table_scroll.winfo_children():
            widget.destroy()
        
        if not data:
            self.no_data_label = ctk.CTkLabel(
                self.table_scroll,
                text="Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi b·ªô l·ªçc",
                font=ctk.CTkFont(size=14),
                text_color="gray"
            )
            self.no_data_label.pack(pady=50)
            return
        
        # Display transactions
        for transaction in data:
            self.create_transaction_row(transaction)
    
    def create_transaction_row(self, transaction):
        """T·∫°o m·ªôt d√≤ng giao d·ªãch"""
        row_frame = ctk.CTkFrame(self.table_scroll)
        row_frame.pack(fill="x", padx=5, pady=2)
        
        # Transaction ID
        ctk.CTkLabel(
            row_frame,
            text=transaction["transaction_id"],
            font=ctk.CTkFont(size=10),
            width=120
        ).pack(side="left", padx=2)
        
        # Date
        ctk.CTkLabel(
            row_frame,
            text=transaction["date"],
            font=ctk.CTkFont(size=10),
            width=100
        ).pack(side="left", padx=2)
        
        # Customer
        ctk.CTkLabel(
            row_frame,
            text=transaction["customer_name"],
            font=ctk.CTkFont(size=10),
            width=150
        ).pack(side="left", padx=2)
        
        # Bill type
        ctk.CTkLabel(
            row_frame,
            text=transaction["bill_type"],
            font=ctk.CTkFont(size=10),
            width=80
        ).pack(side="left", padx=2)
        
        # Amount
        ctk.CTkLabel(
            row_frame,
            text=f"{transaction['amount']:,.0f}",
            font=ctk.CTkFont(size=10, weight="bold"),
            text_color="green",
            width=100
        ).pack(side="left", padx=2)
        
        # Payment method
        ctk.CTkLabel(
            row_frame,
            text=transaction["payment_method"],
            font=ctk.CTkFont(size=10),
            width=100
        ).pack(side="left", padx=2)
        
        # Status
        status_color = "green" if transaction["status"] == "Th√†nh c√¥ng" else "red" if transaction["status"] == "Th·∫•t b·∫°i" else "orange"
        ctk.CTkLabel(
            row_frame,
            text=transaction["status"],
            font=ctk.CTkFont(size=10, weight="bold"),
            text_color=status_color,
            width=100
        ).pack(side="left", padx=2)
        
        # Actions
        action_frame = ctk.CTkFrame(row_frame)
        action_frame.pack(side="left", padx=2)
        
        ctk.CTkButton(
            action_frame,
            text="üëÅÔ∏è",
            command=lambda t=transaction: self.view_transaction_detail(t),
            width=30,
            height=20
        ).pack(side="left", padx=1)
        
        ctk.CTkButton(
            action_frame,
            text="üìÑ",
            command=lambda t=transaction: self.print_receipt(t),
            width=30,
            height=20
        ).pack(side="left", padx=1)
    
    def filter_history(self):
        """L·ªçc l·ªãch s·ª≠ theo ƒëi·ªÅu ki·ªán"""
        filtered_data = self.history_data.copy()
        
        # Filter by date range
        start_date = self.start_date_entry.get().strip()
        end_date = self.end_date_entry.get().strip()
        
        if start_date or end_date:
            filtered_data = [t for t in filtered_data if self.date_in_range(t["date"], start_date, end_date)]
        
        # Filter by status
        status = self.status_combo.get()
        if status != "T·∫•t c·∫£":
            filtered_data = [t for t in filtered_data if t["status"] == status]
        
        # Filter by payment method
        method = self.method_combo.get()
        if method != "T·∫•t c·∫£":
            filtered_data = [t for t in filtered_data if t["payment_method"] == method]
        
        self.display_history(filtered_data)
        self.update_summary(filtered_data)
    
    def date_in_range(self, date_str, start_date, end_date):
        """Ki·ªÉm tra ng√†y c√≥ trong kho·∫£ng kh√¥ng"""
        try:
            date = datetime.strptime(date_str, "%Y-%m-%d %H:%M").date()
            
            if start_date:
                start = datetime.strptime(start_date, "%Y-%m-%d").date()
                if date < start:
                    return False
            
            if end_date:
                end = datetime.strptime(end_date, "%Y-%m-%d").date()
                if date > end:
                    return False
            
            return True
        except:
            return True
    
    def refresh_history(self):
        """L√†m m·ªõi l·ªãch s·ª≠"""
        self.load_history()
        self.app.show_message("Th√†nh c√¥ng", "ƒê√£ l√†m m·ªõi l·ªãch s·ª≠ giao d·ªãch", "success")
    
    def clear_filters(self):
        """X√≥a t·∫•t c·∫£ b·ªô l·ªçc"""
        self.start_date_entry.delete(0, "end")
        self.end_date_entry.delete(0, "end")
        self.status_combo.set("T·∫•t c·∫£")
        self.method_combo.set("T·∫•t c·∫£")
        self.display_history()
        self.update_summary()
    
    def update_summary(self, data=None):
        """C·∫≠p nh·∫≠t th·ªëng k√™ t·ªïng k·∫øt"""
        if data is None:
            data = self.history_data
        
        total_count = len(data)
        total_amount = sum(t["amount"] for t in data)
        success_count = len([t for t in data if t["status"] == "Th√†nh c√¥ng"])
        success_rate = (success_count / total_count * 100) if total_count > 0 else 0
        
        today = datetime.now().date()
        today_count = len([t for t in data if datetime.strptime(t["date"], "%Y-%m-%d %H:%M").date() == today])
        
        self.total_count_label.configure(text=str(total_count))
        self.total_amount_label.configure(text=f"{total_amount:,.0f} VNƒê")
        self.success_rate_label.configure(text=f"{success_rate:.1f}%")
        self.today_count_label.configure(text=str(today_count))
    
    def view_transaction_detail(self, transaction):
        """Xem chi ti·∫øt giao d·ªãch"""
        detail_window = ctk.CTkToplevel(self.app.root)
        detail_window.title("Chi ti·∫øt giao d·ªãch")
        detail_window.geometry("600x500")
        
        # Scroll frame
        scroll_frame = ctk.CTkScrollableFrame(detail_window, width=550, height=450)
        scroll_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # Title
        title_label = ctk.CTkLabel(
            scroll_frame,
            text=f"CHI TI·∫æT GIAO D·ªäCH: {transaction['transaction_id']}",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        title_label.pack(pady=10)
        
        # Transaction details
        details = [
            ("M√£ giao d·ªãch", transaction["transaction_id"]),
            ("Ng√†y giao d·ªãch", transaction["date"]),
            ("T√™n kh√°ch h√†ng", transaction["customer_name"]),
            ("M√£ kh√°ch h√†ng", transaction["customer_id"]),
            ("Lo·∫°i h√≥a ƒë∆°n", transaction["bill_type"]),
            ("Nh√† cung c·∫•p", transaction["provider"]),
            ("M√£ h√≥a ƒë∆°n", transaction["bill_number"]),
            ("S·ªë ti·ªÅn", f"{transaction['amount']:,.0f} VNƒê"),
            ("Ph∆∞∆°ng th·ª©c thanh to√°n", transaction["payment_method"]),
            ("Tr·∫°ng th√°i", transaction["status"]),
            ("M√¥ t·∫£", transaction["description"])
        ]
        
        for label, value in details:
            row_frame = ctk.CTkFrame(scroll_frame)
            row_frame.pack(fill="x", pady=3)
            
            ctk.CTkLabel(
                row_frame,
                text=f"{label}:",
                font=ctk.CTkFont(size=12, weight="bold"),
                width=150
            ).pack(side="left", padx=10)
            
            ctk.CTkLabel(
                row_frame,
                text=str(value),
                font=ctk.CTkFont(size=12)
            ).pack(side="left", padx=10)
        
        # Action buttons
        button_frame = ctk.CTkFrame(scroll_frame)
        button_frame.pack(fill="x", pady=20)
        
        ctk.CTkButton(
            button_frame,
            text="üìÑ In h√≥a ƒë∆°n",
            command=lambda: self.print_receipt(transaction)
        ).pack(side="left", padx=10)
        
        ctk.CTkButton(
            button_frame,
            text="‚ùå ƒê√≥ng",
            command=detail_window.destroy
        ).pack(side="right", padx=10)
    
    def print_receipt(self, transaction):
        """In h√≥a ƒë∆°n"""
        self.app.show_message("Th√¥ng b√°o", f"ƒê√£ g·ª≠i h√≥a ƒë∆°n {transaction['transaction_id']} ƒë·∫øn m√°y in", "info")
    
    def generate_report(self):
        """T·∫°o b√°o c√°o"""
        try:
            result = self.app.excel_processor.create_payment_report(
                self.history_data,
                start_date=self.start_date_entry.get(),
                end_date=self.end_date_entry.get()
            )
            
            if result["success"]:
                self.app.show_message("Th√†nh c√¥ng", f"ƒê√£ t·∫°o b√°o c√°o: {result['file_path']}", "success")
            else:
                self.app.show_message("L·ªói", result["message"], "error")
        except Exception as e:
            self.app.show_message("L·ªói", f"L·ªói t·∫°o b√°o c√°o: {str(e)}", "error")
    
    def export_excel(self):
        """Xu·∫•t Excel"""
        file_path = filedialog.asksaveasfilename(
            title="Xu·∫•t Excel",
            defaultextension=".xlsx",
            filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")]
        )
        
        if file_path:
            try:
                result = self.app.excel_processor.export_payment_history(
                    self.history_data,
                    file_path
                )
                
                if result["success"]:
                    self.app.show_message("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t {result['total_records']} b·∫£n ghi", "success")
                else:
                    self.app.show_message("L·ªói", result["message"], "error")
            except Exception as e:
                self.app.show_message("L·ªói", f"L·ªói xu·∫•t Excel: {str(e)}", "error")
    
    def backup_history(self):
        """Backup l·ªãch s·ª≠"""
        backup_dir = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c backup")
        
        if backup_dir:
            try:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                backup_file = f"{backup_dir}/history_backup_{timestamp}.json"
                
                with open(backup_file, 'w', encoding='utf-8') as f:
                    json.dump(self.history_data, f, indent=2, ensure_ascii=False)
                
                self.app.show_message("Th√†nh c√¥ng", f"ƒê√£ backup l·ªãch s·ª≠: {backup_file}", "success")
            except Exception as e:
                self.app.show_message("L·ªói", f"L·ªói backup: {str(e)}", "error")